//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.test
{ 

public sealed partial class TestRow :  Bright.Config.BeanBase 
{
    public TestRow(JSONNode _json) 
    {
        { if(!_json["x"].IsNumber) { throw new SerializationException(); }  X = _json["x"]; }
        { if(!_json["y"].IsBoolean) { throw new SerializationException(); }  Y = _json["y"]; }
        { if(!_json["z"].IsString) { throw new SerializationException(); }  Z = _json["z"]; }
        { if(!_json["a"].IsObject) { throw new SerializationException(); }  A = test.Test3.DeserializeTest3(_json["a"]);  }
        { var __json0 = _json["b"]; if(!__json0.IsArray) { throw new SerializationException(); } B = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  B.Add(__v0); }   }
        PostInit();
    }

    public TestRow(int x, bool y, string z, test.Test3 a, System.Collections.Generic.List<int> b ) 
    {
        this.X = x;
        this.Y = y;
        this.Z = z;
        this.A = a;
        this.B = b;
        PostInit();
    }

    public static TestRow DeserializeTestRow(JSONNode _json)
    {
        return new test.TestRow(_json);
    }

    public int X { get; private set; }
    public bool Y { get; private set; }
    public string Z { get; private set; }
    public test.Test3 A { get; private set; }
    public System.Collections.Generic.List<int> B { get; private set; }

    public const int __ID__ = -543222164;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        A?.Resolve(_tables);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        A?.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "X:" + X + ","
        + "Y:" + Y + ","
        + "Z:" + Z + ","
        + "A:" + A + ","
        + "B:" + Bright.Common.StringUtil.CollectionToString(B) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
