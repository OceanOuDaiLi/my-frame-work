//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.test
{ 

public sealed partial class Item :  test.ItemBase 
{
    public Item(JSONNode _json)  : base(_json) 
    {
        { if(!_json["num"].IsNumber) { throw new SerializationException(); }  Num = _json["num"]; }
        { if(!_json["price"].IsNumber) { throw new SerializationException(); }  Price = _json["price"]; }
        PostInit();
    }

    public Item(int id, string name, string desc, int num, int price )  : base(id,name,desc) 
    {
        this.Num = num;
        this.Price = price;
        PostInit();
    }

    public static Item DeserializeItem(JSONNode _json)
    {
        return new test.Item(_json);
    }

    public int Num { get; private set; }
    public int Price { get; private set; }

    public const int __ID__ = -1226641649;
    public override int GetTypeId() => __ID__;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "Num:" + Num + ","
        + "Price:" + Price + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
