//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg
{ 

public sealed partial class baserw :  Bright.Config.BeanBase 
{
    public baserw(JSONNode _json) 
    {
        { if(!_json["RewardKey"].IsString) { throw new SerializationException(); }  RewardKey = _json["RewardKey"]; }
        { if(!_json["ShowType"].IsNumber) { throw new SerializationException(); }  ShowType = _json["ShowType"]; }
        { var __json0 = _json["cfgs"]; if(!__json0.IsArray) { throw new SerializationException(); } Cfgs = new System.Collections.Generic.List<BaseReward>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { BaseReward __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = BaseReward.DeserializeBaseReward(__e0);  }  Cfgs.Add(__v0); }   }
        PostInit();
    }

    public baserw(string RewardKey, int ShowType, System.Collections.Generic.List<BaseReward> cfgs ) 
    {
        this.RewardKey = RewardKey;
        this.ShowType = ShowType;
        this.Cfgs = cfgs;
        PostInit();
    }

    public static baserw Deserializebaserw(JSONNode _json)
    {
        return new baserw(_json);
    }

    /// <summary>
    /// 奖励名称
    /// </summary>
    public string RewardKey { get; private set; }
    /// <summary>
    /// 掉落背景
    /// </summary>
    public int ShowType { get; private set; }
    public System.Collections.Generic.List<BaseReward> Cfgs { get; private set; }

    public const int __ID__ = -1396202282;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in Cfgs) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in Cfgs) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "RewardKey:" + RewardKey + ","
        + "ShowType:" + ShowType + ","
        + "Cfgs:" + Bright.Common.StringUtil.CollectionToString(Cfgs) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
